1. Activate virtual environment in CMD
2. Go to project folder in CMD
3. python manage.py migrate
4. add django app - python manage.py startapp shop
5. in app shop create file urls.py and add:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),

]
6. in common urls.py add:
path('', include('shop.urls'))
7. in app shops in file views.py add:
from django.http import HttpResponse

def home(request):
    return HttpResponse('<h1>HOME</h1>')
8. in settings add row in INSTALLED_APPS 'shop',
9. add in views and urls link to page about.html
10. change shop/views.py:
    def home(request):
    return render(request, 'shop/home.html')

def about(request):
    return render(request, 'shop/about.html')

11. Create base.html in templates:
<header>
    <a href="{% url 'home' %}">Home</a>
    <a href="{% url 'about' %}">About</a>
</header>

{% block content %}
{% endblock %}
12. In file home.html and about.html delete all and add:
{% extends 'base.html' %}
{% block content %}
<h1>Home</h1>
{% endblock %}

13. Add html data from bootstrap starting template
14. To add title need:
1) in file base.html
<title>{% block title %}{% endblock %}</title>
2) in child file
{% block title %}
    Home
{% endblock %}
15. Make static folder in ecommerce app and add there pictures. Then:
In CMD type 'python manage.py collectstatic'. It will create new folder static in root directory.
16. In home.html add {% load static %}
and in content block:
<div class="container-fluid">
    <div class="row">
        <img class="img-fluid" src="{% static 'sale1.png' %}">
    </div>
</div>
17. create in ecommerce->static folders css and images. In folder css create base.css and in file base.html add:
{% load static %}
...
<div class="container-fluid">
    <div class="row">
        <img class="img-fluid" src="{% static 'images/sale1.png' %}">
    </div>
</div>
18. add products structure in home.html with {% for i in 'aaaaaaaa' %} {% endfor %}
19. Rename file about to product and add them to urls.py and views.py

24. Add navbar and footer to different files and attach n base.html with {% include 'shop/navbar.html' %}
25. Create models:
from django.db import models

# Create your models here.
class Category(models.Model):
    name_category = models.CharField(max_length=250, unique=True)
    slug_category = models.SlugField(max_length=250, unique=True)
    description_cateory = models.TextField(blank=True)
    image_category = models.ImageField(upload_to='category', blank=True)

    def __str__(self):
        return self.name_category

class Product(models.Model):
    name_product = models.CharField(max_length=250, unique=True)
    slug_product = models.SlugField(max_length=250, unique=True)
    description_product = models.TextField(blank=True)
    category_product = models.ForeignKey(Category, on_delete=models.CASCADE)
    price_product = models.DecimalField(max_digits=10, decimal_places=2)
    image_product = models.ImageField(upload_to='product', blank=True)
    stock_product = models.IntegerField()
    available_product = models.BooleanField(default=True)
    created_product = models.DateTimeField(auto_now_add=True)
    updated_product = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name_product

26. In settings.py add about media
27. In urls.py add:
from django.conf import settings
from django.conf.urls.static import static
...
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
28. Open shop-> admin.py and add:
from .models import Category, Product
admin.site.register(Category)
admin.site.register(Product)
29. In CMD python manage.py makemigrations and then python manage.py migrate
30. Create superuser: python manage.py createsuperuser
31. Solve incorrect views in admin - in models.py add:
in class add class:
    class Meta:
        ordering = ('name_category', )
        verbose_name = 'category'
        verbose_name_plural = 'categories'
Then In CMD python manage.py makemigrations and then python manage.py migrate
32. Add categories and products in admin panel
33. In file views make some changes:
from django.shortcuts import render, get_object_or_404
from .models import Category, Product


def home(request, category_slug=None):
    category_page = None
    products = None
    if category_slug != None:
        category_page = get_object_or_404(Category, slug_category=category_slug)
        products = Product.objects.filter(category_product=category_page, available_product=True)
    else:
        products = Product.objects.all().filter(available_product=True)

    return render(request, 'shop/home.html', {'category': category_page, 'products': products})
34. In file shop->urls.py add:
path('<slug:category_slug>', views.home, name='products_by_category'),
35. Change home.html:
<div class="card mb-4">
                    <div class="p-4">
                        <img class="card-img-top" src="{{product.image_product.url}}" alt="{{product.name_product}}">
                    </div>

                    <div class="card-footer d-flex justify-content-between bg-brd-trans">
                        <p class="font-weihght-bold mb-0">
                            {{product.name_product}}
                        </p>
                        <h5 class="text-info font-italic mb-0">
                            {{product.price_product}}
                        </h5>
                    </div>
                </div>
36. To link between navbar's context menu and categories in app's folder shop create file 'context_processors.py'
from .models import Category

def menu_links(request):
    links = Category.objects.all()
    return dict(links=links)
37. To register context_processors go to settings.py and in context_processors add 'shop.context_processors.menu_links',
38. In navbar.html:
                    <div class="dropdown-menu">
                        {% for category in links %}
                        <a class="dropdown-item" href="{{category.get_url}}">{{category.name_category}}</a>
                        {% endfor %}
                    </div>
39. In models.py in class category:
from django.urls import reverse
...
        def get_url(self):
        return reverse('products_by_category', args=[self.slug_category])
----------- PRODUCT DETAILS ----------------------------
40. Make some changes for product view:
def product(request, category_slug, product_slug):
    try:
        product = Product.objects.get(category_product__slug_category=category_slug, slug_product=product_slug)
    except Exception as e:
        raise e
    return render(request, 'shop/product.html', {'product': product})
41. In product.html:
<div>
            <h1 class="product_title">{{product.name_product}}</h1>
            <h5 class="text-info font-italic mb-4">
                {{product.price_product}}
            </h5>
            <p class="product_desc">Product Description</p>
            <p class="text-justify product_text">
                {{product.description_product}}
            </p>
            {% if product.stock_product <= 0 %}
            <p class="text-justify product_text">
                Out of Stock
            </p>
            {% else %}
            <a href="">Add To Cart</a>
            {% endif %}
        </div>
42. In urls.py:
    path('<slug:category_slug>/<slug:product_slug>', views.product, name='product_detail'),
43. In models.py in class product:
        def get_url(self):
            def get_url(self):
        return reverse('product_detail', args=[self.category_product.slug_category, self.slug_product])
44. In home.html:
<a href="{{product.get_url}}">
                            <img class="card-img-top" src="{{product.image_product.url}}" alt="{{product.name_product}}">
                        </a>
45. In product.html:
<div class="col-10 mx-auto col-md-6 my-3">
                <img src="{{ product.image_product.url }}">
            </div>
------------ CART ---------------
46. In urls.py add cart pattern:
path('cart', views.cart, name='cart'),
47. In views.py add:
def cart(request):
    return render(request, 'shop/cart.html')

48. Create template for cart
{% extends 'shop/base.html' %}

{% load static %}

{% block title %}
    Cart
{% endblock %}

{% block content %}

    Cart

{% endblock %}
49. Make some changes for cart.html and cart.css
---------- CREATE MODEL FOR CART -----------------
50. In file models.py add:
class Cart(models.Model):
    cart_id = models.CharField(max_length=250, blank=True)
    date_added = models.DateField(auto_now_add=True)

    class Meta:
        ordering = ['date_added']
        db_table = 'Cart'

    def __str__(self):
        return self.cart_id

class CartItem(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    quantity = models.IntegerField()
    active = models.BooleanField(default=True)

    class Meta:
        db_table = 'CartItem'

    def sub_total(self):
        return self.product.price_product * self.quantity

    def __str__(self):
        return self.product
51. Update db with migrations
52. Go to views.py:
def _cart_id(request):
    cart = request.session.session_key
    if not cart:
        cart = request.session.create()
    return cart

def add_cart(request, product_id):
    product = Product.object.get(id=product_id)
    try:
        cart = Cart.objects.get(cart_id=_cart_id(request))
    except Cart.DoesNotExist:
        cart = Cart.objects.create(cart_id=_cart_id(request))
        cart.save()
    try:
        cart_item = CartItem.objects.get(product=product, cart=cart)
        if cart_item.quantity <cart_item.product.stock_product:
            cart_item.quantity += 1
            cart_item.save()
    except CartItem.DoesNotExist:
        cart_item = CartItem.objects.create(product=product, quantity=1, cart=cart)
        cart_item.save()

    return redirect('cart_detail')

def cart_detail(request, total=0, counter=0, cart_items=None):
    try:
        cart = Cart.objects.get(cart_id=_cart_id(request))
        cart_items = CartItem.objects.filter(cart=cart, active=True)
        for cart_item in cart_items:
            total += (cart_item.product.price_product * cart_item.quantity)
            counter += cart_item.quantity
    except ObjectDoesNotExist:
        pass

    return render(request, 'cart.html', dict(cart_items=cart_items, total=total, counter=counter))
__________ UPDATE CARTs UI _________________
53. In file cart.html in first table:
                {% for cart_item in cart_items %}
                <tr>
                    <td>
                        <a href="{{cart_item.product.get_url}}">
                            <img src="{{cart_item.product.image_product.url}}" width="100" height="100">
                        </a>
                    </td>
                    <td class="text-left">
                        {{cart_item.product.name_product}}
                        <br>
                        SKU: {{cart_item.product.id}}
                        <br>
                        Unit Price: ${{cart_item.product.price_product}}
                        <br>
                        Quantity: {{cart_item.quantity}} x ${{cart_item.product.price_product}}
                    </td>
                    <td>
                        ${{cart_item.subtotal}}
                    </td>
                    {% if cart_item.quantity < cart_item.product.stock_product %}
                    <td>
                        <a href="{% url 'add_cart' cart_item.product.id %}">
                            <span class="material-icons cart-icon">
                                add_shopping_cart
                            </span>
                        </a><br>
                        <a href="">
                            <span class="material-icons cart-icon">
                                remove_circle_outline
                            </span>
                        </a><br>
                        <a href="">
                            <span class="material-icons cart-icon">
                                remove_shopping_cart
                            </span>
                        </a>
                    </td>
                    {% else %}
                    <td>
                        <a href="">
                            <span class="material-icons cart-icon">
                                remove_circle_outline
                            </span>
                        </a><br>
                        <a href="">
                            <span class="material-icons cart-icon">
                                remove_shopping_cart
                            </span>
                        </a>
                    </td>
                    {% endif %}

                </tr>
                {% endfor %}
54. In file views.py:
    path('cart', views.cart_detail, name='cart_detail'),
    path('cart/add/<int:product_id>', views.add_cart, name='add_cart')
55. In product.html change:
 <a href="{% url 'add_cart' product.id %}">Add To Cart</a>
 ----------- MINUS OR DELETE ITEM FROM CART ------------
56. Go to context_processors:
from .views import _cart_id
from .models import Cart, CartItem


def counter(request):
    item_count = 0
    if 'admin' in request.path:
        return {}
    else:
        try:
            cart = Cart.objects.filter(cart_id=_cart_id(request))
            cart_items = CartItem.objects.all().filter(cart=cart[:1])
            for cart_item in cart_items:
                item_count += cart_items.quantity
        except Cart.DoesNotExist:
            item_count = 0
    return dict(item_count=item_count)
57. Register counter in settings.py:
                'shop.context_processors.counter',
58. In navbar.html after About add:
{% if item_count > 0 %}
                <li class="nav-item">
                    <a class="nav-link text-light text-uppercase font-weight-bold px-3" href="{% url 'cart_detail' %}">
                        <span class="material-icons cart-icon">
                              add_shopping_cart
                        </span>
                        ({{item_count}})
                    </a>
                </li>
                {% endif %}
59. Go to views.py:
def cart_remove(request, product_id):
    cart = Cart.objects.get(cart_id=_cart_id(request))
    product = get_object_or_404(Product, id=product_id)
    cart_item = CartItem.objects.get(product=product, cart=cart)
    if cart_item.quantity > 1:
        cart_item.quantity -= 1
        cart_item.save()
    else:
        cart_item.delete()
    return redirect('cart_detail')
60. Go to urls.py and add:
path('cart/remove/<int:product_id>', views.cart_remove(), name='cart_remove'),
61. Go to views.py:
def cart_remove_product(request, product_id):
    cart = Cart.objects.get(cart_id=_cart_id(request))
    product = get_object_or_404(Product, id=product_id)
    cart_item = CartItem.objects.get(product=product, cart=cart)
    cart_item.delete()
    return redirect('cart_detail')
62. Go to urls.py:
path('cart/remove_product/<int:product_id>', views.cart_remove_product, name='cart_remove_product'),
63. Finally, go to cart.html:
<a href="{% url 'cart_remove_product' cart_item.product.id %}">
                            <span class="material-icons cart-icon">
                                remove_shopping_cart
                            </span>
                        </a>
------------ USER REGISTER --------------
64. In admin panel create User group
65. In shop's app directory create file forms.py:

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User


class SignUpForm(UserCreationForm):
    first_name = forms.CharField(max_length=100, required=True)
    last_name = forms.CharField(max_length=100, required=True)
    email = forms.EmailField(max_length=250, help_text='eg. youremail@gmail.com')

    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'username', 'password1', 'password2')
66. Open views.py:
from django.contrib.auth.models import Group, User
from .forms import SignUpForm
...
def signUpView(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('username')
            signup_user = User.objects.get(username=username)
            user_group = Group.objects.get(name='User')
            user_group.user_set.add(signup_user)
    else:
        form = SignUpForm()

    return render(request, 'shop/signup.html', {'form': form})
67. create signup.html and add:
{% extends 'shop/base.html' %}

{% load static %}

{% block title %}
    Create New Account
{% endblock %}

{% block content %}

    <div>
        {% if not form.is_valid %}
            <div>
                <br>
                <h1 class="product_title text-center">Create new account</h1>
                <br>
                <div class="col-9 col-sm-9 col-md-6 col-lg-5 mx-auto bg-light">
                    <br>
                    <p>Please input the following information to create new account</p>
                    <form action="post">
                        {% csrf_token %}
                        <p>{{form}}</p>
                        <button type="submit" name="Button" class="btn btn-secondary"></button>
                    </form>
                </div>
            </div>
        {% else %}
            <div class="mx-auto">
                <br>
                <h1 class="product_title text-center">
                    Your account has successfully created
                </h1>
                <br>
                <div>
                    <p>Your account has been created and ready to use!</p>
                    <br>
                    <a href="{% url 'home' %}">Continue shopping</a>
                </div>
            </div>
        {% endif %}
    </div>

{% endblock %}
68. In file base.css add:
.errorlist li {
    color: red;
    font-weight: bold;
}
69. In file shop-> urls.py:
path('account/create', views.signUpView, name='signup'),
------------ STYLISH FORM --------------
70. In CMD:
pip install django-crispy-forms
71. Register new module in settings.py:
- in installed apps:
'crispy_forms',
- in the end of page:
CRISPY_TEMPLATE_PACK = 'bootstrap4'
72. Go to signup.html:
{% load crispy_forms_tags %}
...
<form method="post">
    {% csrf_token %}
        <p>{{form | crispy}}</p>
        <button type="submit" class="btn btn-secondary">Sign Up</button>
</form>
____________LOG IN and LOG OUT ---------------
73. Go to views.py :
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import login, authenticate
...
def loginView(request):
    if request.method == 'POST':
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            username = request.POST['username']
            password = request.POST['password']
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('home')
            else:
                return redirect('signup')
    else:
        form = AuthenticationForm()

    return render(request, 'login.html', {'form': form})
74. Create new file login.html:
{% extends 'shop/base.html' %}

{% load static %}
{% load crispy_forms_tags %}

{% block title %}
    Login
{% endblock %}

{% block content %}

        <div class="container">
        <br>
        <h1 class="product_title text-center">
            Login or Create a New Account
        </h1>
        <div class="row">
            <div class="col-12 col-sm-12 col-md-12 col-lg-6 text-center custom_div">
                <br>
                <h2 class="product_title">
                    New User
                </h2>
                <br>
                <a href="{% url 'signup' %}" class="btn btn-secondary">Create New User</a>
            </div>
            <div col="col-12 col-sm-12 col-md-12 col-lg-6 bg-light">
                <div>
                    <br>
                    <h2 class="product_title">
                        Registered Users Only
                    </h2>
                    <form method="post">
                        {% csrf_token %}
                        <p>{{ form | crispy }}</p>
                        <button type="submit" class="btn btn-secondary">Log In</button>
                    </form>
                </div>
            </div>
        </div>
        <br>
    </div>
    <br>

{% endblock %}
75. In urls.py add:
path('account/login/', views.loginView(), name='login')
76. In navbar.html add after About:
{% if request.user.is_authenticated and request.user.first_name  %}
                     <li class="nav-item">
                         <span class="nav-link text-light text-uppercase font-weight-bold px-3">Welcome, {{ request.user.first_name }}!
                             <span class="material-icons">
account_circle
</span>
                        </span></li>

                        <li class="nav-item">
                         <a class="nav-link text-light text-uppercase font-weight-bold px-3" href="">Sign Out
                             <span class="material-icons">
logout
</span>
                        </a></li>

                {% else %}
                        <li class="nav-item">
                         <a class="nav-link text-light text-uppercase font-weight-bold px-3" href="{% url 'signup' %}">Sign Up <span class="material-icons">
account_circle
</span></a>
                        </li>

                        <li class="nav-item">
                             <a class="nav-link text-light text-uppercase font-weight-bold px-3" href="{% url 'login' %}">Login
                                 <span class="material-icons">
                                     login
                                 </span>
                            </a>
                        </li>
                {% endif %}
77. For function 'logout' In file view.py add:
from django.contrib.auth import login, authenticate, logout
...
def signoutView(request):
    logout(request)
    return redirect('login')
78. In urls.py:
    path('account/signout/', views.signoutView, name='signout'),

79. In navbar.html:
<li class="nav-item">
                         <a class="nav-link text-light text-uppercase font-weight-bold px-3" href="{% url 'signout' %}">Sign Out
                             <span class="material-icons">
logout
</span>
                        </a></li>

